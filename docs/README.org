#+TITLE: otm-notes
#+AUTHOR: codexog
#+EXPORT_FILE_NAME: README.md

* Use

This is a simple note taking application. One can take, edit, and remove notes using it,
notes can be tagged and filtered by tag. For more see [[file:specification.org][specification]]. The application has a graphical as well as a command-line interface. The command line interface and the graphical interface are synchronised. In other words they modify the same global state. Terminating either of the active user interfaces will terminate the entire process. The program takes the following options

| prefix     | function                       |
|------------+--------------------------------|
| -f         | the subsequent string is taken as the default file location, the application will attempt to read from the file at launch, and unless changed will write to it when saving the notes. |
| -u         | if the subsequent string is "gui" only the graphical user interface will be launched, in case it is "cmd" it launches the command-line interface without the graphical interface, in case the following string is anything else the application terminates immediately |

Any invalid arguments given to the application are ignored.

The notes are stored in an edn file, for more on the format see [[https://github.com/edn-format/edn][edn-format]]. *Be aware that the application does not write the notes to a file on exit, saving is performed only when the user explicitly does so.*

To run the application simply download the jar file associated with the latest release, and run the command

#+BEGIN_SRC shell
  java -jar <otm-note jar file> <options>
#+END_SRC

* Dev 

To use the development tools you will need to have clojure installed. See [[https://clojure.org/guides/getting_started][GettingStarted]] for instructions on installing and getting started. For more information on the command line tools see [[https://clojure.org/reference/deps_and_cli][Deps and CLI guide]]. For a brief overview of the code structure see [[file:architecture.org][architecture]]. Note also that while this project makes very light use of [[https://clojure.org/about/spec][specs]] they document the implicit data model, and the tests rely on them being up to date.

** Running the project 

#+BEGIN_SRC shell :export code
  clj -A:main "filename"
#+END_SRC

using a desired filename.

** Make a jar and uberjar
Using [[https://github.com/luchiniatwork/cambada][cambada]]

#+BEGIN_SRC shell
  clj -A:uberjar
#+END_SRC
The files are found in the [[file:../target][target]] directory.

The standalone can be run using the command
#+BEGIN_SRC shell
  java -jar target/otm-notes-1.0.0-SNAPSHOT-standalone.jar "filename"
#+END_SRC
Here again using an actual filename.

** Start a pretty REPL
A repl enhanced by [[https://github.com/bhauman/rebel-readline][rebel-readline]]

#+BEGIN_SRC shell
  clj -A:repl
#+END_SRC

** Check your style
Check the project using [[https://github.com/borkdude/clj-kondo][clj-kondo]]

#+BEGIN_SRC shell
  clj -A:style
#+END_SRC

** Run tests
Run the test suite using [[https://github.com/lambdaisland/kaocha][kaocha]]
#+BEGIN_SRC shell
  clj -A:test
#+END_SRC

** Test coverage report
Using [[https://github.com/cloverage/cloverage/tree/master/cloverage/sample/cloverage/sample][cloverage]]

#+BEGIN_SRC shell
  clj -A:cov
#+END_SRC


* Releases 

- [[https://github.com/codexog/otm-notes/releases/tag/5.12.2019-alpha][5.12.2019-alpha]]
  
  
* Bugs
Fixed the ones I found...

* Misc
For the timelog of the project [[file:timelog.org][timelog]].

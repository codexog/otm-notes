#+TITLE:Archictecture
#+AUTHOR: codexog

Here we provide a brief overview of the structure of the code.

** Structure

The code is separated into different namespaces each isolating a particular concern. The logic and consequently the data-model is contained in =otm-notes.notes=, =otm-notes.state= handles statefulness, =otm-notes.ui.cmd= contains the logic pertaining to the command-line interface, =otm-notes.core= reads the arguments given to the application and contains the main function of the application.

*** =otm-notes.state=
While the code in this namespace looks slightly redundant it isolates the rest of the code from the state model of the application. For instance if we wanted to plug in a database it would only affect this namespace directly. In this application most of state is stored in a single [[https://clojure.org/reference/atoms][atom]], not counting ui specific atoms, e.g. the =ui-state= used in =otm-notes.ui.jfx=.

*** =otm-notes.notes=
Data value processing is best done by pure functions which are much easier to test, all of these ar in the namespace =otm-notes.notes=. Note that another reason to separate these from the state model is that such functions do not compose properly, consider for instance the effect on an observer.

*** =otm-notes.core=
Simply reads the arguments given to the application at startup and dispatches calls as appropriate.

*** =otm-notes.ui=
The code under this namespace is entirely separated from the particulars of the data model, see =otm-notes.notes=. For the most part it interfaces with the stateful function interface provided by =otm-notes.state=, as well as the coercion functions from =otm-notes.notes=.

**** =jfx=
Making use of the [[https://github.com/cljfx/cljfcljfx]]= library a Clojure wrapper for [[https://openjfx.io/][JavaFx]], this namespace details the graphical user interface of the application.

***** Overview of an interaction with the graphical user interface
A rough outline of the way that the gui works.

#+BEGIN_SRC plantuml :exports results :file gui_interaction.png
USER -> "otm-notes.ui.jfx" : ui event
"otm-notes.ui.jfx" -> "otm-notes.state" : state and event data

"otm-notes.state" -> "otm-notes.notes" : state value and event data

"otm-notes.notes" -> "otm-notes.state" : new state value

"otm-notes.state" -> "otm-notes.ui.jfx" : commit state change

"otm-notes.ui.jfx" -> USER : ui update
#+END_SRC

#+RESULTS:
[[file:gui_interaction.png]]

**** =cmd=
A simple command line interface.

***** Outline of adding a note in the command line interface
This is slightly more detailed than the one for the graphical user interface, in part because it is more specific.

#+BEGIN_SRC plantuml :exports results :file cmd_interaction.png
USER -> "otm-notes.ui.cmd" : add note command
"otm-notes.ui.cmd" -> USER : prompts for note
USER -> "otm-notes.ui.cmd" : note
"otm-notes.ui.cmd" -> "otm-notes.notes" : tag string
"otm-notes.notes" -> "otm-notes.ui.cmd" : tag set
"otm-notes.ui.cmd" -> "otm-notes.state" : state and new note
"otm-notes.state" -> "otm-notes.ui.cmd" : return
"otm-notes.ui.cmd" -> USER : main loop
#+END_SRC

#+RESULTS:
[[file:cmd_interaction.png]]


*** =otm-notes.io=
The code used to read and write the state, although it is more generic than that. Used by =otm.notes.state= to initialise and save the note state.

*** =otm-notes.utility=
Separated into its own namespace because it makes use of direct Java interop.


** Data processing and data model

The processing and data model of the application is contained in the namespace =otm-notes.notes=. The data model is specified by the specification in the namespace.

** Persistent storage

The state of the application is stored by calling =otm-notes.state/save= on the state and specifying a filename, the specific form that this call takes depends on the user interface used. The file is saved in the edn format, for more on the format see [[https://github.com/edn-format/edn][edn-format]].
